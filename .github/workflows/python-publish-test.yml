name: Build & Publish to TestPyPI

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write        # für OIDC-Upload

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]   # macos-13 = Intel, macos-14 = ARM
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with: {persist-credentials: false}

      - uses: actions/setup-python@v5
        with: {python-version: "3.12"}

      - run: pip install --upgrade build cibuildwheel

      # sdist nur einmal (Linux) erstellen
      - name: Build sdist
        if: runner.os == 'Linux'
        run: python -m build --sdist --outdir dist

      # Wheels für alle CPython-Versionen ≥ 3.8 (Linux, Win, macOS)
      - name: Build wheels
        env:
          CIBW_BUILD: "cp3*-*"        # alle 3.x
          CIBW_SKIP:  "cp36-* cp37-* pp*"   # 3.6/3.7 + PyPy raus
          CIBW_ARCHS_LINUX: "auto aarch64 armv7"
        run: cibuildwheel --output-dir dist

      - uses: actions/upload-artifact@v4      # pro Runner eigene Artefakte
        with:
          name: python-package-${{ runner.os }}
          path: dist/

  publish-to-testpypi:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/loxwebsocket

    steps:
      # alle Artefakte einsammeln
      - uses: actions/download-artifact@v4
        with:
          pattern: python-package-*
          path: artifacts/

      # alles in einen dist/-Ordner kopieren
      - name: Collect distributions
        run: |
          mkdir -p dist
          find artifacts -name '*.whl'  -exec cp {} dist/ \;
          find artifacts -name '*.tar.gz' -exec cp {} dist/ \;

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist
          verbose: true